Drag and Drop Areas HubL Tags | HubSpot
×
close
We use cookies to improve HubSpot’s site. Some cookies are necessary for our website and services to function properly. Other cookies are optional and help personalize your experience, including advertising and analytics. You can consent to all cookies, decline all optional cookies, or manage optional cookies. Without a selection, our default cookie settings will apply. You can change your preferences at any time. To learn more, check out our
Cookie Policy
.
Accept all
Decline all
Manage cookies
Skip to main content
HubSpot logo
Open site navigation
Getting Started
Overview
What to build
Tools to help you build
Account types
Guides
API Guides
Apps
CMS Development
UI Customization
(Beta)
API & Reference
Search
Select a language
English
My account
API Endpoints
CMS Reference
UI Components
(Beta)
On this page
dnd_area
dnd_section
dnd_column
dnd_row
dnd_module
Background
background_color
background_linear_gradient
background_image
How dnd style parameters translate to the page
CMS Reference
HubL (templating language)
Tags
Drag and Drop Areas HubL Tags
Drag and Drop Area HubL tags
Drag and drop areas
allow developers to create sections of pages and global partials that support layout, stylistic and content changes directly within the content editors. See the
creating a drag and drop area tutorial
for an introduction to setting up drag and drop areas.
Drag and drop areas are based on a 12 column responsive grid. Drag and drop tags render markup with class names designating columns and rows. You'll need to add a stylesheet to target those class names. An example of layout styles you could implement can be found in the
HubSpot CMS Boilerplate
. Your stylesheet can be added to the template using
{{ require_css() }}
.
Having trouble watching this video?
Please note:
drag and drop areas can't be used in
blog post
and
email templates
at this time.
dnd_area
A
drag and drop area
is a container that makes a portion of the web page editable in terms of its structure, design, and content. The body of a
{% dnd_area %}
tag supplies the default content for the drag and drop area.
Modules themselves cannot contain drag and drop areas. To provide content creators an interface for adding uniform content within a module, use
repeatable fields and groups
instead.
A
dnd_area
tag can contain the following parameters:
Parameter
Type
Description
class
String
A class added to the wrapping div of a dnd_area
label
String
Used in the editor to label the area in the sidebar.
Input
Output
Input
Output
More
Copy code snippet
{% dnd_area "unique_name", class="main" %}
{% end_dnd_area %}
​
x
1
{%
dnd_area
"unique_name"
, class
=
"main"
%}
2
​
3
{%
end_dnd_area
%}
dnd_area
tags can also contain
dnd_section
tags.
Please note:
a content creator can swap a page's template for another template of the same type, depending on whether it has
dnd_area
tags.
Templates built with the visual drag and drop layout editor can be swapped for other drag and drop templates or coded templates with or without
dnd_area
tags.
Coded templates with
dnd_area
tags can only be swapped for other coded templates with
dnd_area
tags.
Coded templates
without
dnd_area
tags can only be swapped for other coded templates without
dnd_area
tags.
dnd_section
A
{% dnd_section %}
is a top-level row, and must be nested within a
{% dnd_area %}
tag.
Sections can also be defined as a template
, and then
included
into a
dnd_area
, making them ideal for quickly scaffolding out a template.
A
dnd_section
tag can contain the following parameters:
Parameter
Type
Description
background_color
Dict
A dict which supports specifying a
background color
. Can also be provided as a string.
background_image
Dict
A dict which supports specifying a
background image
.
background_linear_gradient
Dict
A dict which supports specifying a
linear gradient background
.
full_width
Boolean
A boolean which determines if the section is intended to be full width or constrained by an inner container.
margin
Dict
A dict which supports specifying margin values in
cm
,
mm
,
Q
,
in
,
pc
,
pt
,
px
,
em
,
ex
,
ch
,
rem
,
lh
,
vw
,
vh
,
vmin
,
vmax
, and
%
. When no unit of measure is provided, the default of
px
is applied.
max_width
Integer
A pixel value which sets a content max-width on a wrapping dict.
padding
Dict
A dict which supports specifying padding values in
cm
,
mm
,
Q
,
in
,
pc
,
pt
,
px
,
em
,
ex
,
ch
,
rem
,
lh
,
vw
,
vh
,
vmin
,
vmax
, and
%
. When no unit of measure is provided, the default of
px
is applied.
vertical_alignment
String
Vertical alignment of child content. Available options include:
TOP
MIDDLE
BOTTOM
Please note:
you can only use one background parameter per
dnd_section
tag.
Input
Output
Input
Output
More
Copy code snippet
{% dnd_section
background_image={
"backgroundPosition": "MIDDLE_CENTER",
"backgroundSize": "cover",
"imageUrl": "https://example.com/path/to/image.jpg"
},
margin={
"top": 32,
"bottom": 32
},
padding={
"top": "1em",
"bottom": "1em",
"left": "1em",
"right": "1em"
},
max_width=1200,
vertical_alignment="MIDDLE"
%}
{% end_dnd_section %}
xxxxxxxxxx
21
1
{%
dnd_section
2
background_image
=
{
3
"backgroundPosition"
:
"MIDDLE_CENTER"
,
4
"backgroundSize"
:
"cover"
,
5
"imageUrl"
:
"https://example.com/path/to/image.jpg"
6
},
7
margin
=
{
8
"top"
:
32
,
9
"bottom"
:
32
10
},
11
padding
=
{
12
"top"
:
"1em"
,
13
"bottom"
:
"1em"
,
14
"left"
:
"1em"
,
15
"right"
:
"1em"
16
},
17
max_width
=
1200
,
18
vertical_alignment
=
"MIDDLE"
19
%}
20
​
21
{%
end_dnd_section
%}
dnd_section
tags can also contain the following tags:
dnd_column
dnd_module
dnd_column
A
{% dnd_column %}
is a vertical structural building block that occupies one or more layout columns defined by its parent row.
This HubL tag must be nested within a
{% dnd_area %}
tag.
A
dnd_column
tag can contain the following parameters:
Parameter
Type
Description
background_color
Dict
A dict which supports specifying a
background color
.
background_image
Dict
A dict which supports specifying a
background image
.
background_linear_gradient
Dict
A dict which supports specifying a
linear gradient background
.
margin
Dict
A dict which supports specifying margin values in
cm
,
mm
,
Q
,
in
,
pc
,
pt
,
px
,
em
,
ex
,
ch
,
rem
,
lh
,
vw
,
vh
,
vmin
,
vmax
, and
%
. When no unit of measure is provided, the default of
px
is applied.
max_width
Integer
A pixel value which sets a content max-width on a wrapping dict.
padding
Dict
A dict which supports specifying padding values in
cm
,
mm
,
Q
,
in
,
pc
,
pt
,
px
,
em
,
ex
,
ch
,
rem
,
lh
,
vw
,
vh
,
vmin
,
vmax
, and
%
. When no unit of measure is provided, the default of
px
is applied.
vertical_alignment
String
Vertical alignment of child content. Available options include:
TOP
MIDDLE
BOTTOM
Please note:
you can only use one background parameter per
dnd_column
tag.
Input
Output
Input
Output
More
Copy code snippet
{% dnd_column
offset=0,
width=12,
background_color={
r: 255,
g: 0,
b: 0,
a: 1
},
margin={
"top": "1em",
"bottom": "1em"
},
%}
{% end_dnd_column %}
xxxxxxxxxx
16
1
{%
dnd_column
2
offset
=
0
,
3
width
=
12
,
4
background_color
=
{
5
r:
255
,
6
g:
0
,
7
b:
0
,
8
a:
1
9
},
10
margin
=
{
11
"top"
:
"1em"
,
12
"bottom"
:
"1em"
13
},
14
%}
15
​
16
{%
end_dnd_column
%}
A
dnd_column
tag can also contain
dnd_row
.
dnd_row
A
{% dnd_row %}
is a horizontal structural building block that creates a nested 12-column layout grid in which columns and modules can be placed.
This HubL tag must be nested within a
{% dnd_area %}
tag.
A
dnd_row
tag can include the following parameters:
Parameter
Type
Description
background_color
Dict
A dict which supports specifying a
background color
.
background_image
Dict
A dict which supports specifying a
background image
.
background_linear_gradient
Dict
A dict which supports specifying a
linear gradient background
.
margin
Dict
A dict which supports specifying margin values in
cm
,
mm
,
Q
,
in
,
pc
,
pt
,
px
,
em
,
ex
,
ch
,
rem
,
lh
,
vw
,
vh
,
vmin
,
vmax
, and
%
. When no unit of measure is provided, the default of
px
is applied.
max_width
Integer
A pixel value which sets a content max-width on a wrapping dict.
padding
Dict
A dict which supports specifying padding values in
cm
,
mm
,
Q
,
in
,
pc
,
pt
,
px
,
em
,
ex
,
ch
,
rem
,
lh
,
vw
,
vh
,
vmin
,
vmax
, and
%
. When no unit of measure is provided, the default of
px
is applied.
vertical_alignment
String
Vertical alignment of child content. Available options include:
TOP
MIDDLE
BOTTOM
Please note:
you can only use one background parameter per
dnd_row
tag.
Input
Output
Input
Output
More
Copy code snippet
{% dnd_row
background_color={
r: 123,
g: 123,
b: 123,
a: 1.0
},
margin={
"top": 20,
"bottom": 200
},
padding={
"top": 20,
"bottom": 200,
"left": 20,
"right": 20
}
%}
{% end_dnd_row %}
xxxxxxxxxx
20
1
{%
dnd_row
2
background_color
=
{
3
r:
123
,
4
g:
123
,
5
b:
123
,
6
a:
1.0
7
},
8
margin
=
{
9
"top"
:
20
,
10
"bottom"
:
200
11
},
12
padding
=
{
13
"top"
:
20
,
14
"bottom"
:
200
,
15
"left"
:
20
,
16
"right"
:
20
17
}
18
%}
19
​
20
{%
end_dnd_row
%}
A dnd_row can also contain the following tags:
dnd_column
dnd_module
dnd_module
A
{% dnd_module %}
is a
module
wrapped within a div where layout, styles and content can be added. The module is specified by referencing its path, which can either be a HubSpot default module (using the
@hubspot/
namespace), or modules you have built, specifying their path within the design manager file tree.
This HubL tag must be nested within a
{% dnd_area %}
tag.
A
dnd_module
tag can contain the following parameters:
Parameter
Type
Description
path
Required
String
The path to a module.
horizontal_alignment
String
Horizontal positioning, supports:
LEFT
,
CENTER
,
RIGHT
offset
Integer
The offset from 0 in the 12 column grid.
width
Integer
The number of columns occupying the 12 column grid.
flexbox_positioning
Deprecated
String
Deprecated do not use.
Instead, use
horizontal_alignment
in tandem with the row or section's
vertical_alignment
instead.
Flexbox position value for the module. Supported a string indicating vertical position followed by horizontal:
TOP_LEFT
TOP_CENTER
TOP_RIGHT
MIDDLE_LEFT
MIDDLE_CENTER
MIDDLE_RIGHT
BOTTOM_LEFT
BOTTOM_CENTER
BOTTOM_RIGHT
Have an old module which has a field name that matches one of the
dnd_module
parameters above? You can
pass default values through a fields parameter
, much like you would a field group.
Input
Output
Input
Output
More
Copy code snippet
{% dnd_module
path="@hubspot/rich_text",
offset=0,
width=8,
%}
{% module_attribute "html" %}
<h1>Hello, world!</h1>
{% end_module_attribute %}
{% end_dnd_module %}
xxxxxxxxxx
9
1
{%
dnd_module
2
path
=
"@hubspot/rich_text"
,
3
offset
=
0
,
4
width
=
8
,
5
%}
6
{%
module_attribute
"html"
%}
7
<
h1
>
Hello, world!
</
h1
>
8
{%
end_module_attribute
%}
9
{%
end_dnd_module
%}
Background
There are a few ways to set backgrounds on column, section and row dnd elements,
background_image
,
background_linear_gradient
, and
background_color
.
background_color
The column, section, and row dnd tags support background colors. You can set the default background color for a drag and drop element using
background_color
. This parameter is a string based parameter and can include the following formats outlined in the example below.
Copy code snippet
{% dnd_section %}
// Hex Value (both 3 and 6 char length)
{% dnd_column background_color="#F7F7F7" %}
{% end_dnd_column %}
{% dnd_column background_color="#FFF" %}
{% end_dnd_column %}
// Both RGB and RGBA
{% dnd_column background_color="rgb(255,255,255)" %}
{% end_dnd_column %}
{% dnd_column background_color="rgba(0,0,0,.25)" %}
{% end_dnd_column %}
{% end_dnd_section %}
xxxxxxxxxx
12
1
{%
dnd_section
%}
2
// Hex Value (both 3 and 6 char length)
3
{%
dnd_column background_color
=
"#F7F7F7"
%}
4
{%
end_dnd_column
%}
5
{%
dnd_column background_color
=
"#FFF"
%}
6
{%
end_dnd_column
%}
7
// Both RGB and RGBA
8
{%
dnd_column background_color
=
"rgb(255,255,255)"
%}
9
{%
end_dnd_column
%}
10
{%
dnd_column background_color
=
"rgba(0,0,0,.25)"
%}
11
{%
end_dnd_column
%}
12
{%
end_dnd_section
%}
background_linear_gradient
The column, section and row dnd elements support background linear gradients. You can set a default gradient using the
background_linear_gradient
parameter. The parameter expects a dict. Currently only supports two color stops.
Parameter
Type
Description
direction
String
The direction of the gradient.
to bottom
to top
to left
to right
colors
array
Array of color strings. Currently supports 2 values, the start and end. Values are provided as strings, and the following formats are supported:
RGB
RGBA
3 char hex
6 char hex
8 char hex
Copy code snippet
{% dnd_section
background_linear_gradient={
"direction": "to bottom",
"colors": [
"#1EB6C3",
"#2A2859"
]
}
%}
{% dnd_module path="@hubspot/rich_text" width="6" %}
{% end_dnd_module %}
{% end_dnd_section %}
xxxxxxxxxx
12
1
{%
dnd_section
2
background_linear_gradient
=
{
3
"direction"
:
"to bottom"
,
4
"colors"
: [
5
"#1EB6C3"
,
6
"#2A2859"
7
]
8
}
9
%}
10
{%
dnd_module path
=
"@hubspot/rich_text"
width
=
"6"
%}
11
{%
end_dnd_module
%}
12
{%
end_dnd_section
%}
background_image
The column, section and row dnd elements support background images. You can provide a default background image by using the
background_image
parameter which expects a dict.
Key
Type
Description
backgroundPosition
String
The background position of the image. Supports a string indicating vertical position followed by horizontal.
TOP_LEFT
TOP_CENTER
TOP_RIGHT
MIDDLE_LEFT
MIDDLE_CENTER
MIDDLE_RIGHT
BOTTOM_LEFT
BOTTOM_CENTER
BOTTOM_RIGHT
backgroundSize
String
The CSS background size property used for the image.
Supported values are:
cover
contain
auto
imageUrl
String
Absolute URL to the image.
Copy code snippet
{% dnd_section
background_image = {
"backgroundPosition": "MIDDLE_CENTER",
"backgroundSize": "cover",
"imageUrl": "https://www.example.com/bg-image.jpg"
},
%}
{% dnd_module path="@hubspot/rich_text" width="6" %}
{% end_dnd_module %}
{% end_dnd_section %}
xxxxxxxxxx
11
1
{%
dnd_section
2
background_image
=
{
3
"backgroundPosition"
:
"MIDDLE_CENTER"
,
4
"backgroundSize"
:
"cover"
,
5
"imageUrl"
:
"https://www.example.com/bg-image.jpg"
6
},
7
%}
8
{%
dnd_module path
=
"@hubspot/rich_text"
width
=
"6"
%}
9
{%
end_dnd_module
%}
10
​
11
{%
end_dnd_section
%}
How dnd style parameters translate to the page
When you are using style based parameters such as
backgrounds
, margins, or padding, the class names are automatically computed for your sections, columns, rows, and modules. The property values you have assigned are then added to those automatically created class names and the resulting CSS code is then placed before the closing
</body>
tag on the page in a
<style>
tag.
Drag and drop styles can also be different at different breakpoints
to offer a responsive look.
Share your feedback
Was this article helpful?
Yes
No
This form is used for documentation feedback only. Learn how to
get help with HubSpot
Developer Home
HubSpot Developer Documentation home
Copyright © 2024 HubSpot, Inc.
Legal Stuff
Privacy Policy
Manage Cookies
Toggle menu
CMS Reference
Overview
Modules
HubL (templating language)
Overview
Operators and expression tests
Filters
Functions
Loops
Tags
Standard tags
Drag and drop areas
Deprecated
Related blog posts
Variables
Variables and macros syntax
Quote template variables
Beta
If statements
Deprecated
Forms
Fields
Serverless functions