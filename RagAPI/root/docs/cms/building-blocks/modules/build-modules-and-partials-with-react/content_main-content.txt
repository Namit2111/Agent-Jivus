Build CMS modules with React | HubSpot
×
close
We use cookies to improve HubSpot’s site. Some cookies are necessary for our website and services to function properly. Other cookies are optional and help personalize your experience, including advertising and analytics. You can consent to all cookies, decline all optional cookies, or manage optional cookies. Without a selection, our default cookie settings will apply. You can change your preferences at any time. To learn more, check out our
Cookie Policy
.
Accept all
Decline all
Manage cookies
Skip to main content
HubSpot logo
Open site navigation
Getting Started
Overview
What to build
Tools to help you build
Account types
Guides
API & Reference
API Endpoints
CMS Reference
UI Components
(Beta)
Search
Select a language
English
My account
API Guides
Apps
CMS Development
UI Customization
(Beta)
On this page
Benefits of building with React vs. HubL
Building and deploying
Limitations
CMS Development
Content and structure
Modules
Build CMS modules with React
Build CMS modules with React
Rather than using HubL to build modules, you can use JavaScript and React instead. Then, after creating a JavaScript module, it can be added to a page either by hardcoding or via the drag and drop editor in HubSpot. In addition to stitching server-rendered React components into the HTML generated by HubL, JavaScript modules and partials support client-side interactivity with
islands
. This enables you to have more precise control over where and when JavaScript is shipped and run in the browser.
Get started with the
CMS React documentation
.
Benefits of building with React vs. HubL
At a high level, building with React comes with benefits including component composability, code reuse, broader community resources, and real access to JavaScript on the server at render time.
Rendering React on the server means that there's less of a divide between your code that serves the initial page HTML and your interactive browser code. In contrast, creating complex and interactive pages with HubL can lead to:
An increase of client-side JavaScript that slows down the page until it's all been downloaded and executed.
Needing to replicate or maintain UI logic across HubL and JavaScript in order to have server HTML that is immediately visible and interactive.
But by building with JavaScript, you can code complex interactive components that either share code or are directly rendered on the server. When paired with the
islands
model, this can enable you to more easily code web experiences that have good Core Web Vital scores (LCP, FID, CLS) even as complexity increases.
Additionally, by building on top of JavaScript and the open source framework of React, you can use the wealth of tooling, third-party libraries via npm, example code, and more that are available in the broader ecosystem. For example, since JavaScript modules and partials are built on top of Vite, you'll get things like ESM, TypeScript, JSX, CSS modules, and tree-shaking out of the box.
Building and deploying
CMS React is built on the
developer projects framework
, which uses a local build and deploy process. A project can be uploaded for build and deploy using the
hs project upload
command. This command can be run in the root of your project, or you can include a directory path in the command.
Copy code snippet
// In root directory
hs project upload
// Specified path
hs project upload path/to/project
​
x
1
// In root directory
2
hs project upload
3
​
4
// Specified path
5
hs project upload path/to/project
The upload command will kick off the project build. By default, projects are configured to
auto-deploy
after successful build. You can turn this setting off in HubSpot after your first successful deploy. If you turn off auto-deploy, you can manually deploy your project after successful build by running
hs project deploy
.
For more information about
hs project
CLI commands, check out the
documentation
or run
hs project --help
.
Limitations
The following features are not currently available for React-based modules:
Importing JavaScript modules into JavaScript partials.
Online code editing within the design manager.
Some HubL features, such as certain tags and filters, may not be readily available in JavaScript components.
Share your feedback
Was this article helpful?
Yes
No
This form is used for documentation feedback only. Learn how to
get help with HubSpot
Developer Home
HubSpot Developer Documentation home
Copyright © 2024 HubSpot, Inc.
Legal Stuff
Privacy Policy
Manage Cookies
Toggle menu
CMS Development
Overview
Tools
Quickstart
Setup
Storage
Content and structure
Overview
CDN, security, and performance
Themes
Templates
Modules
Overview
Quickstart
Build modules and partials with JavaScript
Hide modules and sections from the editor
Fields
Data-driven content
Accessibility
Content search
Content staging
Global content (and partials)
Provide a good editor experience
Forms
Memberships
Menus and navigation
Multi-language
Website settings
Debugging
Improve older sites
Marketplace