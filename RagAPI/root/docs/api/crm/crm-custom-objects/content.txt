CRM | custom objects | HubSpot
×
close
We use cookies to improve HubSpot’s site. Some cookies are necessary for our website and services to function properly. Other cookies are optional and help personalize your experience, including advertising and analytics. You can consent to all cookies, decline all optional cookies, or manage optional cookies. Without a selection, our default cookie settings will apply. You can change your preferences at any time. To learn more, check out our
Cookie Policy
.
Accept all
Decline all
Manage cookies
Skip to main content
HubSpot logo
Open site navigation
Getting Started
Overview
What to build
Tools to help you build
Account types
Guides
API & Reference
API Endpoints
CMS Reference
UI Components
(Beta)
Search
Select a language
English
My account
API Guides
Apps
CMS Development
UI Customization
(Beta)
On this page
Authentication methods
Create a custom object
Properties
Associations
Retrieve existing custom objects
Retrieve custom object records
Update existing custom objects
Update associations
Delete a custom object
Custom object example
Creating the object schema
Creating a custom object record
Associating the custom object record to another record
Defining a new association
Defining a new property
API Guides
CRM
Objects
CRM | custom objects
Custom objects
Supported products
Requires one of the following products or higher.
Marketing Hub
-
Enterprise
Sales Hub
-
Enterprise
Content Hub
-
Enterprise
Service Hub
-
Enterprise
Operations Hub
-
Enterprise
In each HubSpot account, there are the standard CRM objects: contacts, companies, deals, and tickets. To represent and organize your CRM data based on your business needs, you can also create custom objects. You can
create a custom object
in HubSpot, or use the custom objects API to define custom objects, properties, and associations to other CRM objects.
Below, learn how to create and manage custom objects through the API, and see a
walkthrough of creating an example custom object
.
To learn more about creating custom objects, check out the following posts on the HubSpot developer blog:
How to build scalable custom objects
How to build custom objects using private apps
Please note:
custom objects are specific to each account, and depending on your subscription, there are limits on the number of custom objects you can create. Learn more about your limits in the
HubSpot Products & Services catalog
.
Authentication methods
You can create, read, and update custom objects using one of the following methods of authentication:
OAuth
Private app access tokens
Please note:
as of November 30, 2022, HubSpot API Keys are being deprecated and are no longer supported. Continued use of HubSpot API Keys is a security risk to your account and data. During this deprecation phase, HubSpot may deactivate your key at any time.
You should instead authenticate using a private app access token or OAuth. Learn more about
this change
and how to
migrate an API key integration
to use a private app instead.
Create a custom object
To create a custom object, you'll first need to define the object schema. The schema includes the object name, properties, and associations to other CRM objects. You can find the full schema request details in the
Object schema
tab at the top of this article. You can also view a sample request in the
example walkthrough below
.
To create the custom object schema, make a
POST
request to
crm/v3/schemas
. In the request body, include definitions for your object schema, including its name, properties, and associations.
When naming your custom object, keep the following in mind:
Once you create an object, its name and label cannot be changed.
The name can only contain letters, numbers, and underscores.
The first character of the name must be a letter.
Long labels may be cut off in certain parts of the product.
Below, read about the required definitions for the object's properties and associations.
Properties
The properties you define in the request body will be used to store information on individual custom object records.
Please note:
you can have up to 10
unique value properties
for each custom object in your HubSpot account.
You'll use your defined properties to populate the following property-based fields:
requiredProperties:
the properties that are required when creating a new custom object record.
searchableProperties:
the properties that are indexed for searching in HubSpot.
primaryDisplayProperty:
the property used for naming individual custom object records.
secondaryDisplayProperties:
the properties that appear on individual records under the primaryDisplayProperty.
The first property listed in
secondaryDisplayProperties
will be also added as a fourth filter on the object index page if it’s one of the following property types:
string
number
enumeration
boolean
datetime
To remove a display property from the UI, you'll need to first delete the property, then recreate it.
By default, when creating properties through the schema request, property
type
is set to
string
, and the
fieldType
is set to
text
. Below are the values you can use to create different types of properties.
type
Description
Valid
fieldType
values
enumeration
A string representing a set of options, separated by semicolons.
booleancheckbox
,
checkbox
,
radio
,
select
date
An
ISO 8601 formatted value
representing a specific day, month, and year.
date
dateTime
An
ISO 8601 formatted value
representing a specific day, month, year and time of day. The HubSpot app will not display the time of day.
date
string
A plain text strings, limited to 65,536 characters.
file
,
text
,
textarea
number
A number value containing numeric digits and at most one decimal.
number
fieldType
Description
booleancheckbox
An input that will allow users to select one of either Yes or No. When used in a form, it will be displayed as a single checkbox.
checkbox
A list of checkboxes that will allow a user to select multiple options from a set of options allowed for the property.
date
A date value, displayed as a date picker.
file
Allows for a file to be uploaded to a form. Stored and displayed as a URL link to the file.
number
A string of numerals or numbers written in decimal or scientific notation.
radio
An input that will allow users to select one of a set of options allowed for the property. When used in a form, this will be displayed as a set of radio buttons.
select
A dropdown input that will allow users to select one of a set of options allowed for the property.
text
A plain text string, displayed in a single line text input.
textarea
A plain text string, displayed as a multi-line text input.
Associations
HubSpot will automatically associate a custom object with the emails, meetings, notes, tasks, calls, and conversations objects. You can further associate your custom object with other standard HubSpot objects or other custom objects.
When creating associations through the create schema request, identify standard objects using their name and custom objects using their
objectTypeId
value*. For example:*
Copy code snippet
// Example associatedObjects array
"associatedObjects": [
"CONTACT",
"COMPANY",
"TICKET",
"DEAL",
"2-3453932"
]
​
x
1
// Example associatedObjects array
2
​
3
"associatedObjects"
: [
4
"CONTACT"
,
5
"COMPANY"
,
6
"TICKET"
,
7
"DEAL"
,
8
"2-3453932"
9
]
Retrieve existing custom objects
To retrieve all custom objects, make a
GET
request to
/crm/v3/schemas
.
To retrieve a specific custom object, make a
GET
request to one of the following endpoints:
/crm/v3/schemas/{objectTypeId}
/crm/v3/schemas/p_{object_name}
/crm/v3/schemas/{fullyQualifiedName}
. You can find an object's
fullyQualifiedName
in its schema, which is derived from
p{portal_id}_{object_name}
. You can find your account's portal ID using the
account information API.
For example, for an account with an ID of
1234
and an object named
lender
, your request URL could look like any of the following:
https://api.hubapi.com/crm/v3/schemas/2-3465404
https://api.hubapi.com/crm/v3/schemas/p_lender
https://api.hubapi.com/crm/v3/schemas/p1234_lende
Retrieve custom object records
You can also retrieve a custom object's records.
To retrieve a specific record by its record ID value, make a
GET
request to
crm/v3/objects/{objectType}/{recordId}
.
For this endpoint, you can include the following query parameters in the request URL:
Parameter
Description
properties
A comma separated list of the properties to be returned in the response. If the requested custom object record doesn't have a value for a property, it will not appear in the response.
propertiesWithHistory
A comma separated list of the current and historical properties to be returned in the response. If the requested custom object record doesn't have a value for a property, it will not appear in the response.
associations
A comma separated list of objects to retrieve associated IDs for. Any specified associations that don't exist will not be returned in the response. Learn more about the
associations API.
To retrieve multiple records, make a
POST
request to
crm/v3/objects/{objectType}/batch/read
. The batch endpoint
cannot
retrieve associations. Learn how to batch read associations with the
associations API
.
In your request, you can retrieve records by their record ID (
hs_object_id
), or by a custom
unique identifier property
. By default, the
id
values in the request refer to the record ID, so the
idProperty
parameter is not required when retrieving by record ID. To use a custom unique value property, you must include the
idProperty
parameter.
For example, to retrieve a batch of custom object records, your request could look like either of the following:
Copy code snippet
///Example request body for record ID
{
"properties": ["petname"],
"inputs": [
{
"id": "12345"
},
{
"id": "67891"
}
]
}
xxxxxxxxxx
12
1
///Example request body for record ID
2
{
3
"properties"
: [
"petname"
],
4
"inputs"
: [
5
{
6
"id"
:
"12345"
7
},
8
{
9
"id"
:
"67891"
10
}
11
]
12
}
Copy code snippet
///Example request body for unique value property
{
"properties": ["petname"],
"idProperty": "uniquepropertyexample",
"inputs": [
{
"id": "abc"
},
{
"id": "def"
}
]
}
xxxxxxxxxx
13
1
///Example request body for unique value property
2
{
3
"properties"
: [
"petname"
],
4
"idProperty"
:
"uniquepropertyexample"
,
5
"inputs"
: [
6
{
7
"id"
:
"abc"
8
},
9
{
10
"id"
:
"def"
11
}
12
]
13
}
To retrieve custom object records with current and historical values for a property, your request could look like:
Copy code snippet
///Example request body for record ID (current and historical values)
{
"propertiesWithHistory": ["pet_owner"],
"inputs": [
{
"id": "12345"
},
{
"id": "67891"
}
]
}
xxxxxxxxxx
12
1
///Example request body for record ID (current and historical values)
2
{
3
"propertiesWithHistory"
: [
"pet_owner"
],
4
"inputs"
: [
5
{
6
"id"
:
"12345"
7
},
8
{
9
"id"
:
"67891"
10
}
11
]
12
}
Update existing custom objects
To update an object's schema, make a
PATCH
request to
https://api.hubapi.com/crm/v3/schemas/{objectTypeId}
.
Once your custom object is defined:
The object's name and labels (singular and plural)
cannot
be changed.
The
requiredProperties
,
searchableProperties
,
primaryDisplayProperty
, and
secondaryDisplayProperties
can be changed by updating the object's schema. To set a new property as a required, searchable, or display property, you need to create the property prior to updating the schema.
You can create and edit custom object properties either
in HubSpot
or via the
properties API
.
Update associations
To add other object associations to your custom object, make a
POST
request to
/crm/v3/schemas/_{objectTypeId}_/associations
.
You can only associate your custom object with standard HubSpot objects (e.g.
contact
,
company
,
deal
, or
ticket) or other custom objects
. In the
toObjectTypeId
field, identify custom objects by their
objectTypeId
value and standard objects by their name. For example:
Copy code snippet
// Example association request body
{
"fromObjectTypeId": "2-3444025",
"toObjectTypeId": "ticket",
"name": "cat_to_ticket"
}
xxxxxxxxxx
6
1
// Example association request body
2
{
3
"fromObjectTypeId"
:
"2-3444025"
,
4
"toObjectTypeId"
:
"ticket"
,
5
"name"
:
"cat_to_ticket"
6
}
Delete a custom object
You can only delete a custom object after all object instances of that type are deleted. To delete a custom object, make a
DELETE
request to
/crm/v3/schemas/{objectType}
.
If you need to create a new custom object with the same name as the deleted object, you must hard delete the schema by making a
DELETE
request to
/crm/v3/schemas/{objectType}?archived=true
. You can only delete a custom object type after all object instances of that type, associations, and custom object properties are deleted.
Custom object example
The following is a walkthrough of creating an example custom object. For full details of the requests shown, view the Object Definition tab at the top of the article.
This walkthrough covers:
creating a custom object schema.
creating a custom object record.
associating a custom object record with a HubSpot contact.
creating a new association definition between the custom object and HubSpot ticket.
creating a new property definition.
updating the object schema (i.e.
secondaryDisplayProperties
) with the new property.
Goal:
a car dealership called CarSpot wants to store their inventory in HubSpot using a custom object. To track vehicle ownership and purchases, they'll associate cars with contact records. Along the way, they'll also track vehicle maintenance using HubSpot tickets and custom properties.
Creating the object schema
CarSpot needs to create an object schema that can represent the following attributes as properties:
Condition (new or used):
enumeration
Date received at dealership:
date
Year:
number
Make:
string
Model:
string
VIN:
string (unique value)
Color:
string
Mileage:
number
Price:
number
Notes:
string
They'll also add a description to provide context about how to use the object, and define an association between their custom object and the standard contacts object so that they can connect cars to potential buyers.
With their data model finalized, they'll create the object schema by making a
POST
request to
/crm/v3/schemas
with the following request body:all
Copy code snippet
// Example POST request to https://api.hubspot.com/crm/v3/schemas
{
"name": "cars",
"description": "Cars keeps track of cars currently or previously held in our inventory.",
"labels": {
"singular": "Car",
"plural": "Cars"
},
"primaryDisplayProperty": "model",
"secondaryDisplayProperties": ["make"],
"searchableProperties": ["year", "make", "vin", "model"],
"requiredProperties": ["year", "make", "vin", "model"],
"properties": [
{
"name": "condition",
"label": "Condition",
"type": "enumeration",
"fieldType": "select",
"options": [
{
"label": "New",
"value": "new"
},
{
"label": "Used",
"value": "used"
}
]
},
{
"name": "date_received",
"label": "Date received",
"type": "date",
"fieldType": "date"
},
{
"name": "year",
"label": "Year",
"type": "number",
"fieldType": "number"
},
{
"name": "make",
"label": "Make",
"type": "string",
"fieldType": "text"
},
{
"name": "model",
"label": "Model",
"type": "string",
"fieldType": "text"
},
{
"name": "vin",
"label": "VIN",
"type": "string",
"hasUniqueValue": true,
"fieldType": "text"
},
{
"name": "color",
"label": "Color",
"type": "string",
"fieldType": "text"
},
{
"name": "mileage",
"label": "Mileage",
"type": "number",
"fieldType": "number"
},
{
"name": "price",
"label": "Price",
"type": "number",
"fieldType": "number"
},
{
"name": "notes",
"label": "Notes",
"type": "string",
"fieldType": "text"
}
],
"associatedObjects": ["CONTACT"]
}
xxxxxxxxxx
88
1
// Example POST request to https://api.hubspot.com/crm/v3/schemas
2
​
3
{
4
"name"
:
"cars"
,
5
"description"
:
"Cars keeps track of cars currently or previously held in our inventory."
,
6
"labels"
: {
7
"singular"
:
"Car"
,
8
"plural"
:
"Cars"
9
},
10
"primaryDisplayProperty"
:
"model"
,
11
"secondaryDisplayProperties"
: [
"make"
],
12
"searchableProperties"
: [
"year"
,
"make"
,
"vin"
,
"model"
],
13
"requiredProperties"
: [
"year"
,
"make"
,
"vin"
,
"model"
],
14
"properties"
: [
15
{
16
"name"
:
"condition"
,
17
"label"
:
"Condition"
,
18
"type"
:
"enumeration"
,
19
"fieldType"
:
"select"
,
20
"options"
: [
21
{
22
"label"
:
"New"
,
23
"value"
:
"new"
24
},
25
{
26
"label"
:
"Used"
,
27
"value"
:
"used"
28
}
29
]
30
},
31
{
32
"name"
:
"date_received"
,
33
"label"
:
"Date received"
,
34
"type"
:
"date"
,
35
"fieldType"
:
"date"
36
},
37
{
38
"name"
:
"year"
,
39
"label"
:
"Year"
,
40
"type"
:
"number"
,
41
"fieldType"
:
"number"
42
},
43
{
44
"name"
:
"make"
,
45
"label"
:
"Make"
,
46
"type"
:
"string"
,
47
"fieldType"
:
"text"
48
},
49
{
50
"name"
:
"model"
,
51
"label"
:
"Model"
,
52
"type"
:
"string"
,
53
"fieldType"
:
"text"
54
},
55
{
56
"name"
:
"vin"
,
57
"label"
:
"VIN"
,
58
"type"
:
"string"
,
59
"hasUniqueValue"
:
true
,
60
"fieldType"
:
"text"
61
},
62
{
63
"name"
:
"color"
,
64
"label"
:
"Color"
,
65
"type"
:
"string"
,
66
"fieldType"
:
"text"
67
},
68
{
69
"name"
:
"mileage"
,
70
"label"
:
"Mileage"
,
71
"type"
:
"number"
,
72
"fieldType"
:
"number"
73
},
74
{
75
"name"
:
"price"
,
76
"label"
:
"Price"
,
77
"type"
:
"number"
,
78
"fieldType"
:
"number"
79
},
80
{
81
"name"
:
"notes"
,
82
"label"
:
"Notes"
,
83
"type"
:
"string"
,
84
"fieldType"
:
"text"
85
}
86
],
87
"associatedObjects"
: [
"CONTACT"
]
88
}
After creating the object schema, CarSpot makes sure to note the new object's
{objectTypeId}
field, as they'll use this for fetching and updating the object later. They can also use the
{fullyQualifiedName}
value, if they prefer.
Creating a custom object record
With the custom object created, CarSpot can now create records on the object for each car in their inventory.
They'll create their first car by making a
POST
request to
/crm/v3/objects/2-3465404
with the following request body:
Copy code snippet
// Example POST request to https://api.hubspot.com/crm/v3/objects/2-3465404
{
"properties": {
"condition": "used",
"date_received": "1582416000000",
"year": "2014",
"make": "Nissan",
"model": "Frontier",
"vin": "4Y1SL65848Z411439",
"color": "White",
"mileage": "80000",
"price": "12000",
"notes": "Excellent condition. No accidents."
}
}
xxxxxxxxxx
15
1
// Example POST request to https://api.hubspot.com/crm/v3/objects/2-3465404
2
{
3
"properties"
: {
4
"condition"
:
"used"
,
5
"date_received"
:
"1582416000000"
,
6
"year"
:
"2014"
,
7
"make"
:
"Nissan"
,
8
"model"
:
"Frontier"
,
9
"vin"
:
"4Y1SL65848Z411439"
,
10
"color"
:
"White"
,
11
"mileage"
:
"80000"
,
12
"price"
:
"12000"
,
13
"notes"
:
"Excellent condition. No accidents."
14
}
15
}
The response for this API call would look similar to:Copy all
Copy code snippet
// Example response body
{
"id": "181308",
"properties": {
"color": "White",
"condition": "used",
"make": "Nissan",
"mileage": "80000",
"model": "Frontier",
"vin": "4Y1SL65848Z411439",
"notes": "Excellent condition. No accidents.",
"price": "12000",
"year": "2014",
"date_received": "1582416000000"
},
"createdAt": "2020-02-23T01:44:11.035Z",
"updatedAt": "2020-02-23T01:44:11.035Z",
"archived": false
}
xxxxxxxxxx
19
1
// Example response body
2
{
3
"id"
:
"181308"
,
4
"properties"
: {
5
"color"
:
"White"
,
6
"condition"
:
"used"
,
7
"make"
:
"Nissan"
,
8
"mileage"
:
"80000"
,
9
"model"
:
"Frontier"
,
10
"vin"
:
"4Y1SL65848Z411439"
,
11
"notes"
:
"Excellent condition. No accidents."
,
12
"price"
:
"12000"
,
13
"year"
:
"2014"
,
14
"date_received"
:
"1582416000000"
15
},
16
"createdAt"
:
"2020-02-23T01:44:11.035Z"
,
17
"updatedAt"
:
"2020-02-23T01:44:11.035Z"
,
18
"archived"
:
false
19
}
With the record created, they can use the
id
value to later associate the car with an existing contact.
If they wanted to later retrieve this record along with specific properties, they could make a
GET
request to
https://api.hubapi.com/crm/v3/objects/2-3465404/181308?portalId=1234567&properties=year&properties=make&properties=model
Associating the custom object record to another record
You can use the ID of the new car record (
181308
) and the ID of another record to associate a custom object record with a record of another object.
To create an association, make a
PUT
request to
/crm/v3/objects/{objectType}/{objectId}/associations/{toObjectType}/{toObjectId}/{associationType}
. If the object relationship is already
defined
, to determine the
associationType
value, make a
GET
request to
crm/v3/schemas/{objectType}
.
For example, with the contact
ID
51
and the association type
75
,
CarSpot can associate the car record with a contact. Using the above IDs, the request URL will be constructed as follows:
https://api.hubspot.com/crm/v3/objects/2-3465404/181308/associations/contacts/51/75
Defining a new association
CarSpot now wants to start tracking post-sale services for their cars. To do so, they'll use HubSpot tickets to log any maintenance performed.
To allow associations between cars and tickets, they'll create a new association by making a
POST
request to
/crm/v3/schemas/2-3465404/associations
with the following request body:
Copy code snippet
// Example POST request to https://api.hubspot.com/crm/v3/schemas/2-3465494/associations
{
"fromObjectTypeId": "2-3465404",
"toObjectTypeId": "ticket",
"name": "car_to_ticket"
}
xxxxxxxxxx
6
1
// Example POST request to https://api.hubspot.com/crm/v3/schemas/2-3465494/associations
2
{
3
"fromObjectTypeId"
:
"2-3465404"
,
4
"toObjectTypeId"
:
"ticket"
,
5
"name"
:
"car_to_ticket"
6
}
The response for this API call would look similar to:Copy all
Copy code snippet
// Example response
{
"id": "121",
"createdAt": "2020-02-23T01:52:12.893826Z",
"updatedAt": "2020-02-23T01:52:12.893826Z",
"fromObjectTypeId": "2-3465404",
"toObjectTypeId": "0-5",
"name": "car_to_ticket"
}
xxxxxxxxxx
9
1
// Example response
2
{
3
"id"
:
"121"
,
4
"createdAt"
:
"2020-02-23T01:52:12.893826Z"
,
5
"updatedAt"
:
"2020-02-23T01:52:12.893826Z"
,
6
"fromObjectTypeId"
:
"2-3465404"
,
7
"toObjectTypeId"
:
"0-5"
,
8
"name"
:
"car_to_ticket"
9
}
When creating a new association between two custom objects, specify the custom objects by their
objectTypeId
in the
toObjectTypeId
field. For standard objects, you can identify them by name or use the following values:
Contact:
0-1
Company:
0-2
Deal:
0-3
Ticket:
0-5
Defining a new property
As they continue to track maintenance, CarSpot sees an opportunity to bundle maintenance services into packages. To track these maintenance packages on individual car records, they'll create a new enumeration property containing the available packages.
To define a new property, they'll make a
POST
request to
/crm/v3/properties/2-3465404
with the following request body:
Copy code snippet
// Example POST request to https://api.hubspot.com/crm/v3/properties/2-3465404
{
"groupName": "car_information",
"name": "maintenance_package",
"label": "Maintenance Package",
"type": "enumeration",
"fieldType": "select",
"options": [
{
"label": "Basic",
"value": "basic"
},
{
"label": "Oil change only",
"value": "oil_change_only"
},
{
"label": "Scheduled",
"value": "scheduled"
}
]
}
xxxxxxxxxx
22
1
// Example POST request to https://api.hubspot.com/crm/v3/properties/2-3465404
2
{
3
"groupName"
:
"car_information"
,
4
"name"
:
"maintenance_package"
,
5
"label"
:
"Maintenance Package"
,
6
"type"
:
"enumeration"
,
7
"fieldType"
:
"select"
,
8
"options"
: [
9
{
10
"label"
:
"Basic"
,
11
"value"
:
"basic"
12
},
13
{
14
"label"
:
"Oil change only"
,
15
"value"
:
"oil_change_only"
16
},
17
{
18
"label"
:
"Scheduled"
,
19
"value"
:
"scheduled"
20
}
21
]
22
}
The response for this API call would look similar to:Copy all
Copy code snippet
// Example response
{
"updatedAt": "2020-02-23T02:08:20.055Z",
"createdAt": "2020-02-23T02:08:20.055Z",
"name": "maintenance_package",
"label": "Maintenance Package",
"type": "enumeration",
"fieldType": "select",
"groupName": "car_information",
"options": [
{
"label": "Basic",
"value": "basic",
"displayOrder": -1,
"hidden": false
},
{
"label": "Oil change only",
"value": "oil_change_only",
"displayOrder": -1,
"hidden": false
},
{
"label": "Scheduled",
"value": "scheduled",
"displayOrder": -1,
"hidden": false
}
],
"displayOrder": -1,
"calculated": false,
"externalOptions": false,
"archived": false,
"hasUniqueValue": false,
"hidden": false,
"modificationMetadata": {
"archivable": true,
"readOnlyDefinition": false,
"readOnlyValue": false
},
"formField": false
}
xxxxxxxxxx
42
1
// Example response
2
{
3
"updatedAt"
:
"2020-02-23T02:08:20.055Z"
,
4
"createdAt"
:
"2020-02-23T02:08:20.055Z"
,
5
"name"
:
"maintenance_package"
,
6
"label"
:
"Maintenance Package"
,
7
"type"
:
"enumeration"
,
8
"fieldType"
:
"select"
,
9
"groupName"
:
"car_information"
,
10
"options"
: [
11
{
12
"label"
:
"Basic"
,
13
"value"
:
"basic"
,
14
"displayOrder"
:
-
1
,
15
"hidden"
:
false
16
},
17
{
18
"label"
:
"Oil change only"
,
19
"value"
:
"oil_change_only"
,
20
"displayOrder"
:
-
1
,
21
"hidden"
:
false
22
},
23
{
24
"label"
:
"Scheduled"
,
25
"value"
:
"scheduled"
,
26
"displayOrder"
:
-
1
,
27
"hidden"
:
false
28
}
29
],
30
"displayOrder"
:
-
1
,
31
"calculated"
:
false
,
32
"externalOptions"
:
false
,
33
"archived"
:
false
,
34
"hasUniqueValue"
:
false
,
35
"hidden"
:
false
,
36
"modificationMetadata"
: {
37
"archivable"
:
true
,
38
"readOnlyDefinition"
:
false
,
39
"readOnlyValue"
:
false
40
},
41
"formField"
:
false
42
}
Now that the property has been created, they want it to appear in the sidebar of each car record so that the information is readily available to their sales reps and technicians. To do this, they'll add the property to
secondaryDisplayProperties
by making a
PATCH
request to
/crm/v3/schemas/2-3465404
with the following request body:
Copy code snippet
// Example PATCH request to https://api.hubspot.com/crm/v3/schemas/2-3465404
{
"secondaryDisplayProperties": ["maintenance_package"]
}
xxxxxxxxxx
4
1
// Example PATCH request to https://api.hubspot.com/crm/v3/schemas/2-3465404
2
{
3
"secondaryDisplayProperties"
: [
"maintenance_package"
]
4
}
The response for this API call would look similar to:Copy all
Copy code snippet
// Example response
{
"id": "3465404",
"createdAt": "2020-02-23T01:24:54.537Z",
"updatedAt": "2020-02-23T02:12:24.175874Z",
"labels": {
"singular": "Car",
"plural": "Cars"
},
"requiredProperties": ["year", "model", "vin", "make"],
"searchableProperties": ["year", "model", "vin", "make"],
"primaryDisplayProperty": "model",
"secondaryDisplayProperties": ["maintenance_package"],
"portalId": 1234567,
"name": "car"
}
xxxxxxxxxx
16
1
// Example response
2
{
3
"id"
:
"3465404"
,
4
"createdAt"
:
"2020-02-23T01:24:54.537Z"
,
5
"updatedAt"
:
"2020-02-23T02:12:24.175874Z"
,
6
"labels"
: {
7
"singular"
:
"Car"
,
8
"plural"
:
"Cars"
9
},
10
"requiredProperties"
: [
"year"
,
"model"
,
"vin"
,
"make"
],
11
"searchableProperties"
: [
"year"
,
"model"
,
"vin"
,
"make"
],
12
"primaryDisplayProperty"
:
"model"
,
13
"secondaryDisplayProperties"
: [
"maintenance_package"
],
14
"portalId"
:
1234567
,
15
"name"
:
"car"
16
}
Now, when a technician opens a contact record that has an associated car, the property will be displayed in the custom object card in the sidebar:
As CarSpot continues to use HubSpot, they'll likely find ways to refine and expand this custom object and more using HubSpot's API. They might even decide to
build dynamic pages using their custom object data.
Share your feedback
Was this article helpful?
Yes
No
This form is used for documentation feedback only. Learn how to
get help with HubSpot
Developer Home
HubSpot Developer Documentation home
Copyright © 2024 HubSpot, Inc.
Legal Stuff
Privacy Policy
Manage Cookies
Toggle menu
API Guides
Overview
Analytics and events
App management
Automation
CMS
Conversations
Library
CRM
Understanding the CRM
Using object APIs
Associations
Commerce
Engagements
Extensions
Export CRM data
Import CRM data
Lists
Objects
Custom objects
Companies
Contacts
Deal splits
Beta
Deals
Feedback submissions
Goals
New
Leads
Line items
Products
Tickets
CRM embed
Owners
Pipelines
Properties
Search
Object Library
Marketing
Settings
Legal